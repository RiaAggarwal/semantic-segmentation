Script started on 2020-02-14 01:36:23-0800
[r[m[2J[H[?7h[?1;4;6l[?1049h[22;0;0t[4l[?1h=[0m(B[1;61r[H[2J[H[2Jdmund@dmund-11218:~/semantic-segmentation$
dmund@dmund-11218:~/semantic-segmentation$
dmund@dmund-11218:~/semantic-segmentation$
dmund@dmund-11218:~/semantic-segmentation$ python3 -u starter_new.py > fcn_unweighted_idmLoss.log
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
starter_new.py:94: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). m
plt.figure()
starter_new.py:104: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).o 
plt.figure()
starter_new.py:112: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).o 
plt.figure()
starter_new.py:316: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).o 
f = plt.figure(figsize=(16,8))
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
^CTraceback (most recent call last):^C
File "starter_new.py", line 379, in <module>[42D
train()  
File "starter_new.py", line 151, in train[39D
for iter, (X, tar, Y) in enumerate(train_loader):  
File "/datasets/home/16/116/dmund/.local/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 345, in __next__  Fi
data = self._next_data()  
File "/datasets/home/16/116/dmund/.local/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 841, in _next_data  Fi
idx, data = self._get_data()  
File "/datasets/home/16/116/dmund/.local/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 808, in _get_data  Fi
success, data = self._try_get_data()  
File "/datasets/home/16/116/dmund/.local/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 761, in _try_get_data  Fi
data = self._data_queue.get(timeout=timeout)  
File "/opt/conda/lib/python3.7/multiprocessing/queues.py", line 104, in get[73D
if not self._poll(timeout):  
File "/opt/conda/lib/python3.7/multiprocessing/connection.py", line 257, in poll[78D
return self._poll(timeout)  
File "/opt/conda/lib/python3.7/multiprocessing/connection.py", line 414, in _poll[79D
r = wait([self], timeout)  
File "/opt/conda/lib/python3.7/multiprocessing/connection.py", line 920, in wait[78D
ready = selector.select(timeout)  
File "/opt/conda/lib/python3.7/selectors.py", line 415, in select[63D
fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt
^C^C^C^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ python3 -u starter_new.py > fcn_weighted_idm.log
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

^CTraceback (most recent call last):
  File "starter_new.py", line 379, in <module>
    train()
  File "starter_new.py", line 176, in train
    val_loss, val_accuracy, val_iou_net, val_iou_net_class_wise = val(curEpoch)
  File "starter_new.py", line 249, in val
    loss_val = weighted_ce_loss(outputs_val, tar_val, weighted=_weighted_loss)
  File "/datasets/home/home-00/16/116/dmund/semantic-segmentation/utils.py", line 99, in weighted_ce_loss
    cls_weights = torch.Tensor(np.ones(sizes[1])).cuda()
KeyboardInterrupt
^C^C^C^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ 
dmund@dmund-11218:~/semantic-segmentation$ ls 
basic_fcn.py  dataloader.py  fcn_logs3.log  fcn_unweighted_idmLoss.log  inception.py  model_to_run.py  README.md[8C Results[8C    starter_new.py  unet.py   venv
Data[4C      fcn_logs2.log  fcn_logs.log   fcn_weighted_idm.log[8CLICENSE       __pycache__      requirements.txt  starter_new.ipynb  typescript      utils.py  vgg_transfer.py
dmund@dmund-11218:~/semantic-segmentation$ rm -rf Results/[?5h[?5lfcn[?5h[?5l
fcn/                    fcn_unweighted_idmLoss/ fcn_weighted_idmLoss/   
dmund@dmund-11218:~/semantic-segmentation$ rm -rf Results/fcn_weighted_idmLoss/
dmund@dmund-11218:~/semantic-segmentation$ 
dmund@dmund-11218:~/semantic-segmentation$ 
dmund@dmund-11218:~/semantic-segmentation$ 
dmund@dmund-11218:~/semantic-segmentation$ ls
basic_fcn.py  dataloader.py  fcn_logs3.log  fcn_unweighted_idmLoss.log  inception.py  model_to_run.py  README.md[8C Results[8C    starter_new.py  unet.py   venv
Data[4C      fcn_logs2.log  fcn_logs.log   fcn_weighted_idm.log[8CLICENSE       __pycache__      requirements.txt  starter_new.ipynb  typescript      utils.py  vgg_transfer.py
dmund@dmund-11218:~/semantic-segmentation$ screen ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ ^C
dmund@dmund-11218:~/semantic-segmentation$ lsrm -rf Results/fcn_weighted_idmLoss/ls [Kpython3 -u starter_new.py > fcn_weighted_idm.log
[?1l>[61;1H
[?1049l[23;0;0t[detached from 121.fcn]
[7mUtmp slot not found -> not removed[27m                                      
Script done on 2020-02-14 01:38:01-0800
